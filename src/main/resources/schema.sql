CREATE TABLE IF NOT EXISTS users (
    id int4 NOT NULL generated BY DEFAULT AS identity,
    email VARCHAR(50) NOT NULL,
    login VARCHAR(50) NULL,
    "name" VARCHAR(100) NOT NULL,
    birthday DATE NOT NULL,
    UNIQUE (email),
    primary key (id)
);

CREATE TABLE IF NOT EXISTS user_friends (
    user_id int4 NOT NULL references users(id),
    friend_id int4 NOT NULL references users(id),
    constraint user_friends_pkey primary key (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS mpa_film_ratings (
    id int4 NOT NULL generated BY DEFAULT AS identity,
    NAME VARCHAR(50) NOT NULL,
    primary key (id)
);

CREATE TABLE IF NOT EXISTS genres (
    id int4 NOT NULL generated BY DEFAULT AS identity,
    "name" VARCHAR(100) NOT NULL,
    primary key (id)
);

CREATE TABLE IF NOT EXISTS films (
    id int4 NOT NULL generated BY DEFAULT AS identity,
    "name" VARCHAR(100) NULL,
    description VARCHAR(200) NULL,
    release_date TIMESTAMP NOT NULL,
    DURATION int4 NOT NULL,
    mpa_film_rating_id int4 NULL references mpa_film_ratings(id),
    constraint films_description_max_length_ck CHECK(char_length(description) <= 200),
    constraint films_duration_ck CHECK(DURATION > 0),
    primary key (id)
);

CREATE TABLE IF NOT EXISTS film_likes (
    film_id int4 NOT NULL references films(id),
    user_id int4 NOT NULL references users(id),
    primary key (film_id, user_id)
);

CREATE TABLE IF NOT EXISTS film_genres (
    film_id int4 NOT NULL references films(id),
    genre_id int4 NOT NULL references genres(id),
    primary key (film_id, genre_id)
);

CREATE VIEW IF NOT EXISTS GET_FILMS AS
SELECT
    "FILMS"."ID",
    "FILMS"."name",
    "FILMS"."DESCRIPTION",
    "FILMS"."RELEASE_DATE",
    "FILMS"."DURATION",
    "FILMS"."MPA_FILM_RATING_ID",
    "MFR"."NAME" AS "MPA_FILM_RATING_NAME"
FROM
    "FILMS" AS "FILMS"
    INNER JOIN "MPA_FILM_RATINGS" "MFR" ON "MFR"."ID" = "FILMS"."MPA_FILM_RATING_ID";

CREATE VIEW IF NOT EXISTS GET_FILM_GENRES AS SELECT
    film_genres.film_id AS film_id,
    film_genres.genre_id AS genre_id,
    genres."name" AS "name"
FROM
    film_genres AS film_genres
INNER JOIN
    genres AS genres
        ON  film_genres.GENRE_ID = genres.id